package StopWatch;
import java.util.Random;
		public class StopWatch {

			public static void main(String[] args) {
				
				Random rand = new Random();
				
				int count = 1000;
				
				int numbers[] = new int[count];
				
				for (int i = 0; i < count; i++) {
					numbers[i] = rand.nextInt();
				}
				
				MergeSort sorter = new MergeSort();
				
				System.out.println("Стартиране на сортирането: ");
				
				long startTime = System.currentTimeMillis();
				
				sorter.sort(numbers);
				
				long endTime = System.currentTimeMillis();
				
				long totalTime = endTime - startTime;
				
				float seconds = (float) totalTime / 1000;
				
				System.out.println("Време за изпълнение с MergeSort: " + seconds);
				long startTime2 = System.currentTimeMillis();
				selectionSort(numbers);
				long endTime2 = System.currentTimeMillis();

				long totalTime2 = endTime2 - startTime2;
				
				float seconds2 = (float) totalTime2 / 1000;
				
				System.out.println("Време за изпълнение с SelectionSort" + seconds2);
				
				
				long startTime3 = System.currentTimeMillis();
				bucketSort(numbers, int maxN);
				long endTime3 = System.currentTimeMillis();

				long totalTime3 = endTime3 - startTime3;
				
				float seconds3 = (float) totalTime3 / 1000;
				
				System.out.println("Време за изпълнение с bucketSort" + seconds3);
				
			
			}

			private static int[] selectionSort(int numbers[]) {
				for (int i = 0; i < numbers.length - 1; i++) {
					int index = i;
					for (int j = i + 1; j < numbers.length; j++) {
						if (numbers[j] < numbers[index]) {
							index = j;
						}
					}

					int smallest = numbers[index];
					numbers[index] = numbers[i];
					numbers[i] = smallest;
			}

				return numbers;
			}
	private static int[] bucketSort(int numbers[], int maxN) {  
		  {
		    int [] arrSort=new int[maxN+1];

		    for (int i=0; i<arrSort.length; i++) {
		    	arrSort[i]=0;
		    }

		    for (int i=0; i<numbers.length; i++) {
		    	arrSort[numbers[i]]++;
		    }

		    int outPos=0;
		    for (int i=0; i<arrSort.length; i++) {
		       for (int j=0; j<arrSort[i]; j++) {
		          numbers[outPos++]=i;
		       }
		    }
		 }
		return numbers;
		}

			}